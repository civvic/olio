"""Display utils for notebooks."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/17_display.ipynb.

# %% ../nbs/17_display.ipynb 1
from __future__ import annotations


# %% auto 0
__all__ = ['pretty_repr', 'rich_display', 'RenderJSON']

# %% ../nbs/17_display.ipynb
import json
import uuid
from typing import Mapping
from typing import overload
from typing import Sequence

import fastcore.all as FC
import rich
from IPython.display import display
from IPython.display import DisplayHandle
from IPython.display import HTML


# %% ../nbs/17_display.ipynb
@overload
def pretty_repr(*o, html:bool=True, text:bool=False, **kwargs) -> str: ...
@overload
def pretty_repr(*o, html:bool=False, text:bool=True, **kwargs) -> str: ...
def pretty_repr(*o, html:bool=True, text:bool=True, **kwargs) -> dict[str, str]|str:
    from rich.pretty import Pretty
    d = Pretty(*o, **kwargs)._repr_mimebundle_(
        include=((),('text/plain',))[text] + ((),('text/html',))[html], 
        exclude=((),('text/plain',))[not text] + ((),('text/html',))[not html]
        )
    return d if len(d) > 1 else tuple(d.values())[0]

# %% ../nbs/17_display.ipynb
def rich_display(*o, dhdl: DisplayHandle|None=None):
    if not o: return
    vv:tuple[str, ...] = tuple(FC.flatten([_.items() for _ in map(pretty_repr, o)]))  # type: ignore
    dd = {'text/plain':'\n'.join(vv[1::4]), 'text/html':'\n'.join(vv[3::4])}
    if dhdl: dhdl.update(dd, raw=True)
    else: display(dd, raw=True)

# %% ../nbs/17_display.ipynb
class RenderJSON(object):
    def __init__(self, json_data, max_height=200, init_level=0):
        if isinstance(json_data, Sequence):
            s = json.dumps(list(json_data))
        elif isinstance(json_data, Mapping):
            s = json.dumps(dict(json_data))
        elif hasattr(json_data, 'to_dict'):
            s = json.dumps(json_data.to_dict())
        elif hasattr(json_data, 'to_json'):
            s = json_data.to_json()
        else:
            s = json_data
        self.json_str = s
        self.uuid = str(uuid.uuid4())
        self.max_height = max_height
        self.init_level = init_level

    def display(self):
        html_content = f"""
<div id="wrapper-{self.uuid}" style="width: 100%; max-height: {self.max_height}px; overflow-y: auto;">
    <div id="{self.uuid}" style="width: 100%;"></div>
    <script>
        function renderMyJson() {{
            renderjson.set_show_to_level({self.init_level});
            document.getElementById('{self.uuid}').appendChild(renderjson({self.json_str}));
        }};
        function loadRenderjson() {{
            if (window.renderjson) return Promise.resolve();
            return new Promise((resolve, reject) => {{
                const script = document.createElement('script');
                script.src = 'https://cdn.jsdelivr.net/npm/renderjson@latest/renderjson.js';
                script.onload = resolve;
                script.onerror = reject;
                document.head.appendChild(script);
            }});
        }};
        loadRenderjson().then(renderMyJson).catch(err => console.error('Failed to load renderjson:', err));
    </script>
</div>
"""
        display(HTML(html_content), metadata={'bridge': {'skip':True}})

    def _ipython_display_(self):
        self.display()
